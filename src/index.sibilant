(include "@kit-js/core/header")
(import-namespace kit)

(include "@kit-js/interface/header")
(import-namespace interface)

(include "@kit-js/async/header")
(import-namespace async)

(require! (lit Tree-map) "@kit-js/collections"
          'http 'url)

(def parse (path)
  (let ((parsed-url (.parse url path )))
    (mixin parsed-url
           (lit (key (.split parsed-url.pathname "/"))))))

;; (macro def-route (path ...body)
;;        "sugar for adding a route."
;;        `(.add  app @path (=> (req res route) ...@body)))

(include "../meta")

(define Http Interface

  (def get (config)
       (make-promise
        (.on (.get http config success) 'error fail)))

  (def request (config)
    (var request (.request http config))
    (lit request
         (response (make-promise
                    (pipe (.on request 'response success)
                          (.on 'error fail)))))))
(assign module.exports Http)
(define Http.Request Interface
  (init (config)))

(include "./middle-ware")
(include "./router")

(include "./read-stream")

(define Http.Server Interface

  (init (port (*server (.create-server http ))
              (*middle-wares [])))

  (gett events this.*server)
  (gett event this.*server)

  (def start ()

       (.listen this.*server this.port)

       (.on this.*server 'request
            (=> (req res)
                (var message ((create Http.Message ) req res))
                (.for-each this.*middle-wares
                           (=> (m) (.send m message))))))

  (def use (middle-ware) (.push this.*middle-wares middle-ware)))
