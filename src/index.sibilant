(include "kit/header")
(import-namespace kit)

(include "kit-interface/header")
(import-namespace interface)

(require! (lit Tree-map) "tree-kit"
          'http 'url)

(def parse (path)
  (let ((parsed-url (.parse url path )))
    (mixin parsed-url
           (lit (key (.split parsed-url.pathname "/"))))))


;; (macro def-route (path ...body)
;;        "sugar for adding a route."
;;        `(.add  app @path (=> (req res route) ...@body)))

(include "../meta")

(define Http Interface
  (def-promised get (config)
    (.on (.get http config success) 'error fail))
  (def request (config)
    (var request (.request http config))
    (lit request
         (response (make-promise
                    (pipe (.on request 'response success)
                          (.on 'error fail)))))))
(define Http.Request Interface
  (init (config)))

(include "./middle-ware")
(include "./router")

(include "./read-stream")
