(def key-of (path)
  (get (parse path) 'key))

(define Router Interface
  (init ( (*tree ((create Tree-map)))
          (events ((create Event-emitter)))))
  (def start () (.init this))

  (def send (message)

    (var route (.find this message.key))

    (assign message.route route)

    (if (not (or (and route route.value)))
        (.emit this.events 'no-route message)

        (not route.value.key)
        (.emit this.events 'empty-key message)

        ((cond (-> (function? route.value))
               (#-> route.value  )
               (-> (function? route.value.send))
               (#->  route.value.send ))
         (extend message (lit (key (.slice message.key route.value.key.length))))))) 

  (def-generic add (key handler *tree)

    "introduce a new routing node to the tree."

    (.set  *tree key handler)
    this)

  (def-generic find (key *tree )
    "locate a route given an array of keys"

    (let* ((s (first key))
           (child (.get *tree.*children s)))
      (if child
          (.find Router (rest key) child)
          *tree)))

  (def-generic stop ()))

(export Router)
