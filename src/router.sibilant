(def key-of (path)
  (get (parse path) 'key))

(define Router Interface
  (init ( (*tree ((create Tree-map)))))
  (def start () (.init this))

  (def send (message)
    (var route (.find this message.key))

    (assign message.route route)

    (if (not route.value)
        null ;; do nothing if no value
        (function? route.value)
        (.value route message)
        (function? route.value.send)
        (.send route.value message)))

  (def-generic add (key handler *tree)
    "introduce a new routing node to the tree."
    (.set  *tree key handler)
    this)

  (def-generic find (key *tree )
    "locate a route given an array of keys"

    (let* ((s (first key))
           (child (.get *tree.*children s)))
      (if child
          (.find Router (rest key) child)
          *tree.value)))

  (def-generic stop ()))

(export Router)
