(include "kit/header")
(import-namespace kit)
(require! 'sibilant
          )
(require! (lit Router) "../src/index"
          'http )

(include "../meta")
(import-namespace http)

(var PORT 8000)
(var app ((create Router) PORT))
(var test-string "
This is a test, if you see it, you pass.")

(.add app "/tests/add/basic"
      (=> (req res route)
          (print "request" req)
          (print 'response res)
          (print "route" route)
          (.end res test-string)))

(with-http-route (app "/tests/add/with-macro")

  (print "request" req)
  (print 'response res)
  (print "route" route)

  (.end res test-string))
(def-promised http-get (host)
  (pipe (.get http host )
        (.on 'response success)
        (.on  'error fail)))

(def-promised test-request (path)
  (var host ("http://localhost:" PORT path))
  (pipe (http-get host)
        (.then (=> (res)
                   (print "response recieved from" host)
                   (.pipe res process.stdout)
                   (.write process.stdout "\n")))))

(.start app)
(.on app.server 'listening
     (-> (pipe (.all Promise (.map ["/tests/add/basic"
                                    "/tests/add/with-macro"]
                                   test-request))))
     )


